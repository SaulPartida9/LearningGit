Git reset y git rm son comandos con utilidades muy diferentes, pero a�n as� se confunden muy f�cilmente.

git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos "viajar en el tiempo" y recuperar el �ltimo commit antes de borrar el archivo en 

Recuerda que git rm no puede usarse as� nom�s. Debemos usar uno de los flags para indicarle a Git c�mo eliminar los archivos que ya no necesitamos en la �ltima versi�n del proyecto:

git rm --cached: Elimina los archivos de nuestro repositorio local y del �rea de staging, pero los mantiene en nuestro disco duro. B�sicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado un
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos m�s avanzados).
git reset
Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atr�s

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de usar git reset: con el argumento --hard, borrando toda la informaci�n que tengamos en el �rea de staging (y perdiendo todo para siempre). O, un poco m�s seguro, con el argumento --soft, que mantiene all� los archivos del �rea de staging

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, as� podemos aplicar las �ltimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la informaci�n de los commits y del �rea de staging se borra del historial.
�Pero todav�a falta algo!

git reset HEAD: Este es el comando para sacar archivos del �rea de staging. No para borrarlos ni nada de eso, solo para que los �ltimos cambios de estos archivos no se env�en al �ltimo commit, a menos que cambiemos de opini�n y los incluyamos de nuevo en
�Por qu� esto es importante?
Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualizaci�n. Todos los archivos con cambios se mueven al �rea de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no est� listo todav�a. Actualizaste el archivo

�Qu� podemos hacer?

Bueno, todos los cambios est�n en el �rea de Staging, incluido el archivo con los cambios que no est�n listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los dem�s.

�Al usar git rm lo que haremos ser� eliminar este archivo completamente de git! Todav�a tendremos el historial de cambios de este archivo, con la eliminaci�n del archivo como su �ltima actualizaci�n. Recuerda que en este caso no busc�bamos eliminar un ar

En cambio, si usamos git reset HEAD, lo �nico que haremos ser� mover estos cambios de Staging a Unstaged. Seguiremos teniendo los �ltimos cambios del archivo, el repositorio mantendr� el archivo (no con sus �ltimos cambios pero s� con los �ltimos en los 

Conclusi�n: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.


<<<<<<< HEAD
Hey! i am text modified at master an i will need merge with changes cames from sprintResetChanges branch
=======


This the text that will be merged to master branch (Y)
>>>>>>> sprintResetChanges
