New History filte to track changes to git
And now this is on github reporitory

With git exist next spaces where wor work with our files:
1 Work Directory : directory where exist or files and where we made changes on it
2 Stagging : space to add changed files and prepared to make a git commit
3 Local repository : space where the commited files are stored in git

4 Remote repository : you sync your local repository to remote repository to pull or/and push changes between they

git cong -l : shows git configs list
git config --global user.name "userName": set username
git config --global user.email "email@domai.com": set email

Git init : inicia el proyecto
git --list 
git log file.extension
git show file.ext
git add file.extension add to stage
git rm -chached file.ext unstage
git commit -m "Commit Message" 
git status : show status of files changed, tracked, untraked, staged, unstaged, etc
git add . : stage all modified files
git ra --cahed . : unstaged all staged files
git diff commitNumberA  commitNumberB : show difference bettwen tow commits
git diff : show difference bettewn work directory and stagging
git log --stat : log with details
git checkout commitfile : sincy status from commit (or master) indicated of file or entire commit if a specific file is not defined to local repository
git commit -am "Message" git: add to stage an exisiting file and commited it at same time


Git reset HEAD : similar to undo, undo changes of a file and unestage it

checkout : get changes from branch defined or master if not

El comando git checkout + ID del commit nos permite viajar en el tiempo. Podemos volver a cualquier versión anterior de un archivo específico o incluso del proyecto entero. Esta también es la forma de crear ramas y movernos entre ellas.

También hay una forma de hacerlo un poco más “ruda”: usando el comando git reset. En este caso, no solo “volvemos en el tiempo”, sino que borramos los cambios que hicimos después de este commit.

Hay dos formas de usar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.


git checkout brancName : switch to indicate branch

git branch : list branches available into repository

git merge branchNameTeMergeWithActualBranch(Head) : brings the changes into indicate branch to current branch

git restore file : discar changes of indicate file 

git remote add origin repositoryLink : sync local repository to remote repository

git remote : shows origins

git remote -v : show fetch and push origins

git push origin localBranch : pushes changes in local master branch to remote origin

git pull orgin localBranch (main in github) : fechts (get) files from remote orign branch to local work direcotry and stagging (local merge) in current local branch (HEAD normally master)

git log --all --graph --decorate --oneline : show tracked changes decorating merges and commits by each line

git tag : show tags

git tag -a vNumber -m "Tag description" commitNumber : adds a tag to indicated commit

git show-ref --tags : show tags of commits

history : show history of used commands 

git push origin main --tags : send local added tags to remote repository

git tag -d tagName : delete indicated tag

git push origin :ref/tags/v0.02 : sync tags reference on remote an local tags, if a local tag was deleted this action will reflect it on remote repository

git show-branch : shows brnaches and its history

